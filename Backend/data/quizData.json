[
  {
    "question": "What is the primary purpose of middleware in Express.js?",
    "options": [
      "To define routes for handling requests.",
      "To manage database connections.",
      "To execute code before or after a route handler.",
      "To render HTML templates."
    ],
    "answerIndex": 2
  },
  {
    "question": "Which of the following methods is used to send JSON data in an Express.js response?",
    "options": [
      "res.render()",
      "res.send()",
      "res.json()",
      "res.redirect()"
    ],
    "answerIndex": 2
  },
  {
    "question": "How can you access request parameters in Express.js?",
    "options": [
      "req.body",
      "req.query",
      "req.params",
      "req.headers"
    ],
    "answerIndex": 2
  },
  {
    "question": "What does the `next()` function do in Express.js middleware?",
    "options": [
      "It terminates the request-response cycle.",
      "It sends a response to the client.",
      "It passes control to the next middleware function in the stack.",
      "It restarts the current middleware function."
    ],
    "answerIndex": 2
  },
  {
    "question": "Which of the following is the correct way to define a route parameter named 'id' in Express.js?",
    "options": [
      "app.get('/user/:id', ...)",
      "app.get('/user?id=', ...)",
      "app.get('/user/id', ...)",
      "app.get('/user/id:', ...)"
    ],
    "answerIndex": 0
  },
  {
    "question": "What is the purpose of the `app.use()` method in Express.js?",
    "options": [
      "To define a specific route handler.",
      "To register middleware functions.",
      "To start the Express.js server.",
      "To connect to a database."
    ],
    "answerIndex": 1
  },
  {
    "question": "How can you set a cookie in an Express.js response?",
    "options": [
      "res.sendCookie()",
      "res.setCookie()",
      "res.cookie()",
      "res.setHeader('Set-Cookie', ...)"
    ],
    "answerIndex": 2
  },
  {
    "question": "What is the role of the `body-parser` middleware in Express.js?",
    "options": [
      "To compress response data.",
      "To parse incoming request bodies.",
      "To validate user input.",
      "To handle file uploads."
    ],
    "answerIndex": 1
  },
  {
    "question": "Which of the following is a commonly used template engine with Express.js?",
    "options": [
      "React",
      "Angular",
      "Vue",
      "Pug"
    ],
    "answerIndex": 3
  },
  {
    "question": "How do you handle errors in Express.js middleware?",
    "options": [
      "Using try-catch blocks only.",
      "By passing the error to the `next()` function.",
      "By using `res.error()`.",
      "Express.js automatically handles all errors."
    ],
    "answerIndex": 1
  },
  {
    "question": "What does `app.listen(3000)` do in an Express application?",
    "options": [
      "It connects to a database on port 3000.",
      "It defines a route that listens for requests on port 3000.",
      "It starts the Express server and listens for connections on port 3000.",
      "It redirects the user to port 3000."
    ],
    "answerIndex": 2
  },
  {
    "question": "How do you serve static files (e.g., images, CSS) in Express.js?",
    "options": [
      "Using the `res.static()` method.",
      "Using the `express.static()` middleware.",
      "By defining routes for each file.",
      "Express.js cannot serve static files."
    ],
    "answerIndex": 1
  },
  {
    "question": "What is the purpose of `res.redirect()` in Express.js?",
    "options": [
      "To send JSON data to the client.",
      "To render a template.",
      "To send an HTTP redirect response.",
      "To terminate the request-response cycle."
    ],
    "answerIndex": 2
  }
]